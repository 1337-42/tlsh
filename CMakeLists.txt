cmake_minimum_required(VERSION 3.20)

project(
  TLSH
  VERSION 4.12.0
  LANGUAGES CXX
  DESCRIPTION "TLSH C++ implementation"
)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED True)
set(CMAKE_CXX_EXTENSIONS OFF)
set(VCPKG_MANIFEST_MODE OFF)
set(CXX_STANDARD 20)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

option(TLSH_BUILD_STATIC "Build as static library instead of shared library" ON)
option(TLSH_BUILD_BINDINGS "Build Python bindings" ON)

# # TLSH uses only half the counting buckets.
# # It can use all the buckets now.
set(TLSH_BUCKETS 128)

if(TLSH_BUCKETS EQUAL 48)
  set(TLSH_HASH "min hash")
elseif(TLSH_BUCKETS EQUAL 128)
  set(TLSH_HASH "compact hash")
elseif(TLSH_BUCKETS EQUAL 256)
  set(TLSH_HASH "full hash")
else()
  message(FATAL_ERROR "Invalid TLSH_BUCKETS value")
endif()

# # TLSH uses 1 byte checksum. The collision rate is 1 in 24.
# # It can use 3 bytes checksum now. That collision rate in 1 in 5800.
set(TLSH_CHECKSUM 1)

# if(TLSH_CHECKSUM_0B EQUAL 1)
#   set(TLSH_CHECKSUM "no checksum")
#   add_definitions(-DCHECKSUM_0B)
# endif()
# if(TLSH_CHECKSUM_1B EQUAL 1)
#   set(TLSH_CHECKSUM "1 byte checksum")
# endif()
# if(TLSH_CHECKSUM_3B EQUAL 1)
#   set(TLSH_CHECKSUM "3 bytes checksum")
#   add_definitions(-DCHECKSUM_3B)
# endif()

# setting TLSH_DISTANCE_PARAMETERS to 1 allows you to set command line arguments
# to set - and hence experiment with the distance parameters
#	by default this is zero
set(TLSH_DISTANCE_PARAMETERS 0)

# # write a file with the VERSION information
# file(REMOVE VERSION)
# file(WRITE VERSION
#   "// This file is generated by cmake.  Modify\n"
#   "// CMakeLists.txt to change the VERSION numbers\n"
#   "TLSH version: ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH} ${TLSH_HASH}, ${TLSH_CHECKSUM}\n")

# file(REMOVE include/version.h)
# file(REMOVE include/tlsh_version.h)
# file(WRITE include/tlsh_version.h
#   "/****************************************************\n"
#   " * This file is generated by cmake.  Modify the top\n"
#   " * level CMakeLists.txt to change the VERSION numbers\n"
#   " ****************************************************/\n\n"
#   "#define VERSION_MAJOR ${VERSION_MAJOR}\n"
#   "#define VERSION_MINOR ${VERSION_MINOR}\n"
#   "#define VERSION_PATCH ${VERSION_PATCH}\n"
#   "#define TLSH_HASH \"${TLSH_HASH}\"\n"
#   "#define TLSH_CHECKSUM \"${TLSH_CHECKSUM}\"\n")
# if(TLSH_DISTANCE_PARAMETERS EQUAL 1)
# file(APPEND include/tlsh_version.h
#   "#define TLSH_DISTANCE_PARAMETERS ${TLSH_DISTANCE_PARAMETERS}\n")
# endif()

# if (CMAKE_BUILD_TYPE STREQUAL Debug)
#     if(CMAKE_COMPILER_IS_GNUCXX)
#         set(CMAKE_CXX_FLAGS "-g")
#     endif()
# else(CMAKE_BUILD_TYPE STREQUAL Debug)
#     if(MSVC)
#         set(CMAKE_CXX_FLAGS "/O2")        ## Optimize
#     else(MSVS)
#         set(CMAKE_CXX_FLAGS "-O3")
#     endif()
# endif(CMAKE_BUILD_TYPE STREQUAL Debug)

# if(MSVC)
#     add_definitions(-DTLSH_LIB)
#     # include_directories(Windows)
# endif()

# user can override CXX; make sure tests link and load properly regardless of LD_LIBRARY_PATH
# if(CMAKE_COMPILER_IS_GNUCXX)
#     # issue #116 Library will not compile on CENTOS 7
#     # set(CMAKE_EXE_LINKER_FLAGS "-static-libstdc++")
#     set(CMAKE_EXE_LINKER_FLAGS "-static-libgcc")
# endif()

# # from https://stackoverflow.com/questions/5395309/how-do-i-force-cmake-to-include-pthread-option-during-compilation
# set(CMAKE_THREAD_PREFER_PTHREAD TRUE)

# # This flag seems to only be for older versions of CMake, such as https://cmake.org/cmake/help/v3.2/module/FindThreads.html
# set(THREADS_PREFER_PTHREAD_FLAG TRUE)
# find_package(Threads REQUIRED)

# TODO
# enable_testing()

set(TLSH_ROOT_DIR ${CMAKE_CURRENT_LIST_DIR})

add_subdirectory(src)

if(TLSH_BUILD_BINDINGS)
  if (NOT TLSH_BUILD_STATIC)
    message(FATAL_ERROR "Bindings require static build")
  endif (NOT TLSH_BUILD_STATIC)
  add_subdirectory(python)
endif(TLSH_BUILD_BINDINGS)


# add_subdirectory(test)
# add_subdirectory(utils)
# add_subdirectory(Testing)

# if(MSVC)
#     add_subdirectory(Windows)
# endif()

# set(CPACK_GENERATOR "TGZ")
# set(CPACK_SOURCE_GENERATOR "TGZ")
# set(CPACK_SOURCE_PACKAGE_FILE_NAME "TLSH-${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}")
# set(CPACK_PACKAGE_VERSION_MAJOR "${VERSION_MAJOR}")
# set(CPACK_PACKAGE_VERSION_MINOR "${VERSION_MINOR}")
# set(CPACK_PACKAGE_VERSION_PATCH "${VERSION_PATCH}")
# set(CPACK_SOURCE_IGNORE_FILES
# "~$"
# "^${PROJECT_SOURCE_DIR}/bin/"
# "^${PROJECT_SOURCE_DIR}/lib/"
# "^${PROJECT_SOURCE_DIR}/build/"
# "^${PROJECT_SOURCE_DIR}/py_ext/data/"
# "^${PROJECT_SOURCE_DIR}/py_ext/build/"
# "^${PROJECT_SOURCE_DIR}/Testing/tmp/"
# "^${PROJECT_SOURCE_DIR}/CMakeFiles/"
# )
# include(CPack)

